name: Publish
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  pypi-publish:
    name: ‚¨ÜÔ∏è Upload release to PyPI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: üîî Check out
        uses: actions/checkout@v3

      - name: üèóÔ∏è python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: ‚¨áÔ∏è Python PDM
        uses: pdm-project/setup-pdm@v3

      - name: ‚¨áÔ∏è Python Dependencies
        run: pdm install -G:all

      - name: üöÇ Activate environment
        run: echo "$(pdm venv --path in-project)/bin" >> $GITHUB_PATH

      - name: üöß Building distributions.
        run: pdm build

      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: üç∫ Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
