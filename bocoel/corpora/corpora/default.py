import dataclasses as dcls
from typing import Any

from typing_extensions import Self

from bocoel.corpora.interfaces import Corpus, Distance, Embedder, Searcher, Storage


@dcls.dataclass(frozen=True)
class ComposedCorpus(Corpus):
    """
    Simply a collection of components.
    """

    searcher: Searcher
    storage: Storage

    @classmethod
    def index_storage(
        cls,
        storage: Storage,
        embedder: Embedder,
        key: str,
        klass: type[Searcher],
        distance: Distance,
        **kwargs: Any
    ) -> Self:
        """
        Creates a corpus from the given storage, embedder, key and searcher class.

        Parameters
        ----------

        `storage: Storage`
        Storage is used to store the questions / answers / etc.
        Can be viewed as a dataframe of texts.

        `embedder: Embedder`
        Embedder is used to embed the texts into vectors.
        It should provide the ranges such that the searchers look into.

        `key: str`
        The key to the column to search over.

        `klass: type[Searcher]`
        The searcher class to use.
        Creates a searcher from the embeddings generated by the embedder.
        """

        embeddings = embedder.encode(storage.get(key))
        searcher = klass.from_embeddings(embeddings, distance=distance, **kwargs)
        return cls(searcher=searcher, storage=storage)
